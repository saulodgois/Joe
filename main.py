import discord
from discord import app_commands
from config import Config
import random
import string
import asyncio
import pytz
from datetime import datetime
from datetime import date
import time
import json
import os
from collections import defaultdict
import aiohttp
import openai

Config.verificar_variaveis()

class BotJoe(discord.Client):
    def __init__(self):
        intents = discord.Intents.all()
        super().__init__(
            command_prefix='!',
            intents=intents
        )
        self.tree = app_commands.CommandTree(self)

    async def setup_hook(self):
        await self.tree.sync()

    async def on_ready(self):
        print('Minha jornada √© eterna. Que desafios o novo dia trar√°?')

    async def on_member_join(self, member):
        canal_id = int(Config.CANAL_ID)
        canal = self.get_channel(canal_id)
        if canal:
            await canal.send(f'Boas-vindas, {member.mention}. Que sua breve estadia neste reino seja... interessante. Eu sou Joe, uma lenda que precede sua chegada em incont√°veis eras.')

    async def on_member_remove(self, member):
        canal_id = int(Config.CANAL_ID)
        canal = self.get_channel(canal_id)
        if canal:
            await canal.send(f'Adeus, {member.mention}. O seu ciclo se por aqui se fechou')


bot = BotJoe()

#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
@bot.tree.command(name='ola', description='Diga Ol√° para Joe')
async def ola(interaction:discord.Integration):
    await interaction.response.send_message(f'Oi, dizeis? {interaction.user.mention}, o que h√° de novo sob o sol que eu j√° n√£o tenha visto?')

#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
@bot.tree.command(name='conselho', description='Pede um conselho a Joe')
async def conselho(interaction: discord.Interaction, mensagem: str):
    mensagem_lower = mensagem.lower()

    if 'futebol' in mensagem_lower:
        await interaction.response.send_message(f'Conselho sobre futebol, {interaction.user.mention}? Lembre-se, Flamengo e Arsenal s√£o os verdadeiros tit√£s do esporte bret√£o!')
    elif 'amor' in mensagem_lower or 'relacionamento' in mensagem_lower:
        await interaction.response.send_message(f'Ah, o amor, {interaction.user.mention}... um labirinto que percorri incont√°veis vezes. Lembre-se, a paci√™ncia √© uma virtude, e nem sempre o cora√ß√£o mortal compreende os la√ßos eternos.')
    elif 'guerra' in mensagem_lower or 'batalha' in mensagem_lower:
        await interaction.response.send_message(f'Conselho sobre a guerra, {interaction.user.mention}? Eu sou um veterano de eras. Escolha suas batalhas com sabedoria e lembre-se que nem toda vit√≥ria vale o pre√ßo.')
    elif 'vida' in mensagem_lower or 'existencia' in mensagem_lower:
        await interaction.response.send_message(f'A vida, {interaction.user.mention}... um breve piscar para voc√™s. Aproveite cada momento, pois para mim, eles se acumulam como poeira estelar.')
    elif 'argentina' in mensagem_lower or 'argentinos' in mensagem_lower or 'argentino' in mensagem_lower:
        await interaction.response.send_message(f'Se eu pudesse apagar um √∫nico evento da minha vasta linha do tempo, talvez seria o surgimento da Argentina.')
    else:
        await interaction.response.send_message(f'Voc√™ busca meu conselho sobre "{mensagem}", {interaction.user.mention}? Hmm... minhas experi√™ncias transcendem seus problemas cotidianos, mas reflita sobre a imperman√™ncia de todas as coisas.')

#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
@bot.tree.command(name='duelo', description='Chame Joe para um duelo mortal')
async def duelo(interaction: discord.Interaction):
    resultado = random.random()

    if resultado < 0.85:  # 85% de chance
        respostas = [
            f'Hahaha! {interaction.user.mention}, voc√™ realmente achou que poderia vencer Joe? Eu lutei em mil batalhas antes mesmo de voc√™ nascer!',
            f'*Joe desvia com facilidade e aplica um golpe certeiro* {interaction.user.mention}, voc√™ √© mais lento que um recruta no primeiro dia de treinamento!',
            f'Pat√©tico. {interaction.user.mention}, Eu sinto pena de voc√™. Meu nome √© Joe, guarde na memoria antes de morrer!',
            f'*Joe ri enquanto desarma voc√™ com um movimento* {interaction.user.mention}, isso foi tudo que voc√™ tem? At√© meu av√¥ lutava melhor - e ele estava morto!',
            f'Em um piscar de olhos, Joe j√° est√° atr√°s de voc√™. {interaction.user.mention}, voc√™ nem viu o golpe que te derrubou.'
        ]
        mensagem = random.choice(respostas)

    elif resultado < 0.95:  # 10% de chance (total 95%)
        respostas = [
            f'{interaction.user.mention}, voc√™ tem habilidade... mas n√£o o suficiente! *finaliza o combate*',
            f'Not√°vel! {interaction.user.mention}, voc√™ conseguiu me acertar. Mas a guerra n√£o se vence com um s√≥ golpe! *Joe contra-ataca*',
            f'{interaction.user.mention}, faz d√©cadas que n√£o levava um golpe assim... mas ainda n√£o √© o suficiente para derrotar Joe!',
            f'Voc√™ surpreendeu Joe, {interaction.user.mention}. Mas surpresa n√£o vence batalhas! *prepara o ataque final*',
            f'{interaction.user.mention}, eu vi muitos como voc√™... promissores, mas ainda verdes.'
        ]
        mensagem = random.choice(respostas)

    else:  # 5% de chance
        respostas = [
            f'Tem meu respeito, {interaction.user.mention}. Espero lembrar de voc√™.',
            f'{interaction.user.mention}, vou lembrar desse nome. Nossa luta foi mais do que lendaria',
            f'Voc√™ lutou bem, {interaction.user.mention}. Mas √† minha v√≠toria era inevitavel.'
        ]
        mensagem = random.choice(respostas)

    efeitos = ['‚öîÔ∏è', 'üí•', 'ü©∏', 'üî•', 'üó°Ô∏è']
    mensagem += ' ' + random.choice(efeitos)

    await interaction.response.send_message(mensagem)

#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
@bot.tree.command(name='origem', description='Pergunte sobre a origem de Joe')
async def origem(interaction:discord.Integration):
    await interaction.response.send_message(f'Minha origem √© envolta nos mist√©rios do tempo primordial. Antes dos humanos erguerem suas primeiras cidades, eu j√° caminhava por esta Terra.')

#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
with open('timezones_expandidas.json', 'r', encoding='utf-8') as f:
    cidades = json.load(f)

@bot.tree.command(name='hora', description='Pergunte a Joe o horario de uma regi√£o do globo')
@app_commands.describe(cidade='Digite o nome da cidade.')
async def hora(interaction:discord.Integration, cidade: str):
    cidade_formatada = cidade.strip().title()

    if cidade_formatada not in cidades:
        await interaction.response.send_message(f'E eu l√° tenho cara de rel√¥gio? üò°')
        return
    
    fuso = cidades[cidade_formatada]
    agora = datetime.now(pytz.timezone(fuso))
    hora_formatada = agora.strftime('%H:%M:%S - %d/%m/%Y')

    await interaction.response.send_message(f'Agora s√£o {hora_formatada} em {cidade_formatada}, coral.')

#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#openai.api_key = Config.OPENAI_KEY

#@bot.tree.command(name='gpt', description='Pergunte qualquer coisa ao veterano Joe')
#async def gpt(interaction: discord.Interaction, pergunta: str):
#    await interaction.response.defer()
#
#    try:
#        # Configura√ß√£o direta da OpenAI (substitua pela sua chave)
#        openai.api_key = "sua-chave-openai-aqui"
#
#        response = openai.ChatCompletion.create(
#            model="gpt-3.5-turbo",
#            messages=[
#                {"role": "system", "content": """Voc√™ √© Joe, veterano imortal de guerras atrav√©s dos s√©culos.
#                Responda como um soldado experiente com humor negro e refer√™ncias hist√≥ricas. Seja direto e sarc√°stico.
#                Use no m√°ximo 3 par√°grafos curtos."""},
#                {"role": "user", "content": pergunta}
#            ],
#            max_tokens=500,
#            temperature=0.7
#        )
#
#        resposta = response.choices[0].message.content
#        await interaction.followup.send(f"{interaction.user.mention} {resposta}")
#
#    except Exception as e:
#        await interaction.followup.send(f"{interaction.user.mention} Estou cansado de voc√™ humano.")

#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
@bot.tree.command(name='anime', description='Joe busca informa√ß√µes sobre um anime')
async def anime(interaction: discord.Interaction, nome: str):
    await interaction.response.defer()

    async with aiohttp.ClientSession() as session:
        url = f'https://api.jikan.moe/v4/anime?q={nome}&limit=1'
        async with session.get(url) as resp:
            if resp.status != 200:
                await interaction.followup.send('As vis√µes est√£o turvas... n√£o consegui acessar os arquivos sagrados do MyAnimeList.')
                return

            data = await resp.json()

            if not data['data']:
                await interaction.followup.send(f'Nenhum anime chamado **{nome}** foi encontrado nas cr√¥nicas antigas.')
                return

            anime_info = data['data'][0]
            titulo = anime_info['title']
            sinopse = anime_info['synopsis'][:500] + '...' if anime_info['synopsis'] else 'Sem sinopse.'
            score = anime_info['score'] or 'Sem nota'
            episodios = anime_info['episodes'] or '?'
            link = anime_info['url']

            await interaction.followup.send(
                f'**{titulo}**\n'
                f'üì∫ Epis√≥dios: {episodios} | ‚≠ê Nota: {score}\n'
                f'üìñ {sinopse}\n'
                f'üîó {link}\n\n'
                f'O que achas disso, mortal? Seria digno do meu tempo eterno?'
            )

#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
@bot.tree.command(name='roleta', description='Joe escolhe um n√∫mero aleat√≥rio entre dois valores')
async def roleta(interaction: discord.Interaction, minimo: int, maximo: int):
    if minimo >= maximo:
        await interaction.response.send_message(f'{interaction.user.mention} Voc√™ acha que Joe √© burro? O primeiro n√∫mero deve ser menor que o segundo!')
        return

    if (maximo - minimo) > 1000000:
        await interaction.response.send_message(f'{interaction.user.mention} *examina os n√∫meros* Voc√™ quer mesmo que eu conte at√© {maximo-minimo}? Nem nos meus piores pesadelos...')
        return

    numero = random.randint(minimo, maximo)

    respostas = [
        f'Entre {minimo} e {maximo}... {interaction.user.mention}, minha escolha √© **{numero}**.',
        f'*Joe examina os n√∫meros* Hmm... {interaction.user.mention}, vou com **{numero}**.',
        f'Na minha longa experi√™ncia... {interaction.user.mention}, **{numero}** parece uma boa escolha.',
        f'*Joe gira uma roleta imagin√°ria* Pare! {interaction.user.mention}, o n√∫mero √© **{numero}**!',
        f'Pelos campos de batalha de mil eras... {interaction.user.mention}, escolho **{numero}**.',
        f'*Joe cospe no ch√£o* {interaction.user.mention}, **{numero}**. Nem pense em questionar.',
        f'Na guerra, n√∫meros s√£o tudo. {interaction.user.mention}, hoje √© **{numero}**.'
    ]

    mensagem = random.choice(respostas)

    if numero == 666:
        mensagem += '\n*N√∫mero azarado... gosto disso.*'
    elif numero == 14:
        mensagem += '\n*Meu n√∫mero da sorte.*'
    elif numero == 73:
        mensagem += '\n*O melhor n√∫mero √© 73. Deve estar se perguntando o porque... 73 √© o vig√©simo primeiro n√∫mero primo, seu contraio 37 √© o decimo segundo e o seu contrario 21 √© o produto da multiplica√ß√£o de, se segure, 7 por 3. Hein, hein... estou mentindo?*'
    elif numero == 7 or numero == 777:
        mensagem += '\n*Bom sinal.*'
    elif numero == minimo:
        mensagem += f'\n*O m√≠nimo... {interaction.user.mention}, voc√™ est√° com sorte hoje?*'
    elif numero == maximo:
        mensagem += f'\n*O m√°ximo! {interaction.user.mention}, talvez voc√™ tenha o toque de Midas.*'

    await interaction.response.send_message(mensagem)

#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
def carregar_db():
    if os.path.exists('cacador_db.json'):
        with open('cacador_db.json', 'r') as f:
            return json.load(f)
    return {}

def salvar_db(db):
    with open('cacador_db.json', 'w') as f:
        json.dump(db, f)

ESTRUTURA_PADRAO = {
    'elfo': 0,
    'alienigena': 0,
    'gigante': 0,
    'semideus': 0,
    'deus': 0,
    'argentino': 0,
    'nada': 0
}

@bot.tree.command(name='ca√ßar', description='N√≥s ca√ßamos criaturas lend√°rias... e registramos seus trof√©us')
async def cacar(interaction: discord.Interaction):
    user_id = str(interaction.user.id)
    db = carregar_db()

    if user_id not in db:
        db[user_id] = ESTRUTURA_PADRAO.copy()

    resultado = random.random()

    if resultado <= 0.05:
        presa = 'nada'
    elif resultado <= 0.50:
        presa = 'elfo'
    elif resultado <= 0.85:
        presa = 'alienigena'
    elif resultado <= 0.95:
        presa = 'gigante'
    elif resultado <= 0.99:
        presa = 'semideus'
    else:
        presa = 'deus'

    db[user_id][presa] += 1
    salvar_db(db)

    respostas = {
        'nada': [
            f'*Varremos o terreno* {interaction.user.mention}, s√≥ vimos poeira e... era um coelho. Vergonhoso.',
            f'{interaction.user.mention}, at√© nossas armas antigas se envergonharam. Nada digno hoje.'
        ],
        'elfo': [
            f'*Disparo certeiro* {interaction.user.mention}, abatemos um elfo das sombras. Dizem que vivem 300 anos...',
            f'{interaction.user.mention}, elfo eliminado. Guardem as orelhas. N√≥s preferimos os dentes.'
        ],
        'alienigena': [
            f'**SINAL DE VIDA EXTRATERRESTRE** {interaction.user.mention}, capturamos um Xenomorfo. Servir√° de porta-copos.',
            f'{interaction.user.mention}, pegamos um \'E.T.\'...',
            f'Capturamos um alienigena. {interaction.user.mention}, o que faremos com ele?'
        ],
        'gigante': [
            f'*Explos√£o ensurdecedora* {interaction.user.mention}, derrubamos um gigante.',
            f'{interaction.user.mention}, cegamos um ciclope. Ironia divina.',
            f'Voc√™ derrubou um gigante com uma pedra, {interaction.user.mention}? Hahaha.'
        ],
        'semideus': [
            f'**SANGUE DIVINO DETECTADO** {interaction.user.mention}, executamos um filho de Ares. O Olimpo tremer√°.',
            f'{interaction.user.mention}, aprisionamos um semideus. Pediu clem√™ncia... Lembramos a ele: clem√™ncia morreu em Stalingrado.',
            f'Um semideus, {interaction.user.mention}.'
        ],
        'deus': [
            f'**‚ö° PANTE√ÉO ABALADO ‚ö°** {interaction.user.mention}, N√ìS DERROTAMOS THOR. REPITAM: N√ìS. MATAMOS. UM. DEUS.',
            f'{interaction.user.mention}, somos uma dupla e tanto, derrotamos um deus.',
            f'Nunca vi um deus t√£o fraco. {interaction.user.mention}, nem precisamos chamar o Hulk.'
        ],
        'argentino': [
            f'Ei, {interaction.user.mention}, capturamos um argentino! *Queimamos o corpo 3 vezes*',
            f'{interaction.user.mention}, exterminamos a pior das criaturas... um argentino com mate. Atiramos primeiro.'
        ]
    }

    if random.random() <= 0.003:
        presa = 'argentino'

    mensagem = random.choice(respostas[presa])
    emojis = {
        'nada': 'üï≥Ô∏è',
        'elfo': 'üßù‚Äç‚ôÇÔ∏èüî´',
        'alienigena': 'üëΩüí•',
        'gigante': 'üëπü©∏',
        'semideus': '‚ö°‚ö∞Ô∏è',
        'deus': '‚ò†Ô∏èüëë',
        'argentino': 'üíÄüá¶üá∑'
    }
    await interaction.response.send_message(f'{mensagem} {emojis[presa]}')

#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
@bot.tree.command(name='trofeus', description='Mostra seu hall da fama como ca√ßador')
async def trofeus(interaction: discord.Interaction):
    user_id = str(interaction.user.id)
    db = carregar_db()

    if user_id not in db:
        await interaction.response.send_message(f'{interaction.user.mention}, voc√™ ainda n√£o ca√ßou nada. Pat√©tico.')
        return

    stats = db[user_id]
    embed = discord.Embed(
        title=f'Hall da Fama de {interaction.user.name}',
        description='*Estat√≠sticas oficiais do ca√ßador*',
        color=0x8B0000  # Vermelho-sangue
    )
    embed.add_field(name='üèπ Criaturas Ca√ßadas', value=f"""
    ‚Ä¢ Elfos: {stats['elfo']}
    ‚Ä¢ Alien√≠genas: {stats['alienigena']}
    ‚Ä¢ Gigantes: {stats['gigante']}
    ‚Ä¢ Semideuses: {stats['semideus']}
    ‚Ä¢ Deuses: {stats['deus']}
    ‚Ä¢ Argentinos: {stats['argentino']}
    """)
    embed.set_footer(text='N√≥s observamos seus progressos...')

    await interaction.response.send_message(embed=embed)

#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
API_KEY = Config.API_FOOTBALL_KEY

HEADERS = {
    "x-apisports-key": API_KEY
}

LIGAS_TOP5 = {
    "Premier League": 39,
    "La Liga": 140,
    "Serie A": 135,
    "Bundesliga": 78,
    "Brasileir√£o": 71
}

@bot.tree.command(name='jogos_hoje', description='Joe diz os jogos do dia das principais ligas do mundo')
async def jogos_hoje(interaction: discord.Interaction):
    await interaction.response.defer()
    hoje = datetime.now().date().isoformat()
    resultados = []

    async with aiohttp.ClientSession() as session:
        for nome_liga, liga_id in LIGAS_TOP5.items():
            url = f"https://v3.football.api-sports.io/fixtures?date={hoje}&league={liga_id}&season=2024"
            async with session.get(url, headers=HEADERS) as resp:
                data = await resp.json()
                jogos = data.get('response', [])

                if jogos:
                    resultados.append(f"üèÜ **{nome_liga}**")
                    for jogo in jogos:
                        casa = jogo['teams']['home']['name']
                        fora = jogo['teams']['away']['name']
                        hora_utc = jogo['fixture']['date'][11:16]
                        resultados.append(f"   ‚öΩ {casa} x {fora} ‚Äî `{hora_utc} UTC`")
                    resultados.append("")

    if resultados:
        resposta = "\n".join(resultados)
    else:
        resposta = "Hoje t√° mais parado que VAR em amistoso. Nenhum jogo nas top-5 ligas."

    await interaction.followup.send(content=f"üìÖ **Jogos de hoje:**\n{resposta}")

#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
@bot.tree.command(name='gerar_senha', description='Joe cria uma senha segura para voc√™')
@app_commands.describe(
    tamanho='Quantos caracteres a senha deve ter (1 a 64)',
    complexidade='N√≠vel: apenas_numeros, numeros_e_letras ou completa'
)
async def gerar_senha(interaction: discord.Interaction, tamanho: int, complexidade: str):
    if tamanho < 1:
        await interaction.response.send_message(
            'Voc√™ quer uma senha ou n√£o? ü§® N√£o existe uma senha com menos de um caracter.',
            ephemeral=True
        )
        return
    elif tamanho > 64:
        await interaction.response.send_message(
            'Voc√™ quer que eu escreva uma b√≠blia ou uma senha? S√≥ vou escrever no m√°ximo 64 caracteres.',
            ephemeral=True
        )
        return

    complexidade = complexidade.lower()
    
    def gerar_senha_segura():
        for _ in range(100):
            if complexidade == 'apenas_numeros':
                senha = ''.join(random.choices(string.digits, k=tamanho))
                return senha
            
            elif complexidade == 'numeros_e_letras':
                senha = ''.join(random.choices(string.ascii_letters + string.digits, k=tamanho))
                if any(c.isdigit() for c in senha) and any(c.isalpha() for c in senha):
                    return senha
                
            elif complexidade == 'completa':
                senha = ''.join(random.choices(string.ascii_letters + string.digits + string.punctuation, k=tamanho))
                if (any(c.isdigit() for c in senha) and (any(c.isalpha() for c in senha) and (any(c in string.punctuation for c in senha)))):
                    return senha

        return senha

    if complexidade not in ['apenas_numeros', 'numeros_e_letras', 'completa']:
        await interaction.response.send_message(
            'Complexidade inv√°lida. Use: `apenas_numeros`, `numeros_e_letras` ou `completa`.',
            ephemeral=True
        )
        return

    senha = gerar_senha_segura()

    await interaction.response.send_message(
        f'Fico feliz que voc√™ confia na minha experi√™ncia para criar uma senha segura. üîê\n\n`{senha}`\n\n'
        'Essa mensagem fica s√≥ entre n√≥s, ningu√©m mais pode ver... ent√£o n√£o compartilhe com os outros mortais! üòè',
        ephemeral=True
    )

#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

bot.run(Config.DISCORD_TOKEN) #.env